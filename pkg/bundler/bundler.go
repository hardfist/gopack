package bundler

import (
	"fmt"
	"os"
	"path/filepath"
)

// Bundler represents the main bundling engine
type Bundler struct {
	entryPoint string
	outputDir  string
	config     *Config
}

// Config holds bundler configuration
type Config struct {
	OutputFile string
	Mode       string // "development" or "production"
}

// New creates a new bundler instance
func New() *Bundler {
	return &Bundler{
		outputDir: "./dist",
		config: &Config{
			OutputFile: "bundle.js",
			Mode:       "development",
		},
	}
}

// Bundle processes the entry file and creates a bundle
func (b *Bundler) Bundle(entryFile string) error {
	// Validate entry file exists
	if _, err := os.Stat(entryFile); os.IsNotExist(err) {
		return fmt.Errorf("entry file does not exist: %s", entryFile)
	}

	// Create output directory if it doesn't exist
	if err := os.MkdirAll(b.outputDir, 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %v", err)
	}

	fmt.Printf("ðŸ“¦ Bundling %s...\n", entryFile)

	// Basic bundling logic (placeholder for now)
	content, err := b.processFile(entryFile)
	if err != nil {
		return fmt.Errorf("failed to process file: %v", err)
	}

	outputPath := filepath.Join(b.outputDir, b.config.OutputFile)
	if err := os.WriteFile(outputPath, []byte(content), 0644); err != nil {
		return fmt.Errorf("failed to write bundle: %v", err)
	}

	fmt.Printf("âœ… Bundle created: %s\n", outputPath)
	return nil
}

// processFile processes a single file and its dependencies
func (b *Bundler) processFile(filePath string) (string, error) {
	content, err := os.ReadFile(filePath)
	if err != nil {
		return "", err
	}

	// Basic processing - in a real bundler, this would:
	// 1. Parse the file for imports/requires
	// 2. Resolve dependencies
	// 3. Transform/transpile code
	// 4. Bundle everything together

	processed := fmt.Sprintf(`// Bundle generated by Gopack
// Entry: %s

%s`, filePath, string(content))

	return processed, nil
}

// SetConfig updates bundler configuration
func (b *Bundler) SetConfig(config *Config) {
	b.config = config
}

// SetOutputDir sets the output directory
func (b *Bundler) SetOutputDir(dir string) {
	b.outputDir = dir
}
